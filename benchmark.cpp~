#include <iostream>
#include "opencv2/opencv.hpp"
#include <sys/time.h>
#include <opencv2/nonfree/nonfree.hpp>

//#include "surf.cu"

#define GPU 1
#define CPU 0

#if GPU
	#include "opencv2/gpu/gpu.hpp"
	#include "opencv2/nonfree/gpu.hpp"
	//using namespace cv::gpu;
#endif

using namespace cv;
using namespace std;

void ensureSizeIsEnough(int rows, int cols, int type, cv::gpu::GpuMat& m);

inline double time(timeval *tim){
	gettimeofday(tim, NULL);
	return (tim->tv_sec + (tim->tv_usec/1000000.0) );
}

int main(int argc, char** argv){
	
	if (argc < 2){
		cout << "Insufficient args; usage ./cam <input file>\n";
		exit(0);
	}
	
	timeval tim;
	int thresh = 5.0;
	Mat frame;
	
#if GPU
	cout << "Initializing Cuda\n";
	cv::gpu::DeviceInfo info;
	cv::gpu::setDevice(0);
	gpu::FAST_GPU gpuFastDetector(thresh);
	gpu::SURF_GPU surf(thresh, 4, 2, true, 0.01f, false);
		
/*	cv::Mat src_host = cv::imread("city_1.jpg", CV_LOAD_IMAGE_GRAYSCALE);
	cv::gpu::GpuMat dst1, src1;
	src1.upload(src_host);
	cv::gpu::threshold(src1,dst1, 128.0, 255.0, CV_THRESH_BINARY);
	src1.release();
	dst1.release();*/

//TODO: Decide where to put the start timer.
	for (int i = 0; i < 1; i++){
		double total = 0.0;
		double max = 0.0;
		double detector_total = 0.0;
		double extractor_total = 0.0;
		double min = 100.0;
		bool started = false;
		int numFrames = 0;
		VideoCapture capture(argv[1]);
		if (!capture.isOpened() )
			throw "Error when opening video file.\n";
		cout << "Start loop GPU\n";

//	    gpu::GpuMat keypoints1GPU, keypoints2GPU;
	//	gpu::GpuMat descriptors; //, descriptors_keyframe; // Have to be in scope
		vector<KeyPoint> keypoints, first_keypoints;
		vector<float> test;
		int ii = 0;
		for ( ; ; ){
			cout << "Start surf " << endl;
			ii++;
			capture >> frame;
			if (frame.empty() ){
				cout << " Break\n";
				break;
			}
			double start = time(&tim);
			cout << "0\n";
			cvtColor(frame, frame, COLOR_BGR2GRAY);
			cout << "1\n";
			gpu::GpuMat kps, src, descriptors1GPU, empty;
			src.upload(frame);
			cout << "2\n";
			gpuFastDetector(src, kps, kps);
			cout << "3\n";
			double detector_end = time(&tim);
			
			gpu::GpuMat descriptors;
			const int nFeatures = kps.cols;
			::cv::gpu::compute_descriptors_gpu(descriptors, kps.ptr<float>(gpu::SURF_GPU::X_ROW), kps.ptr<float>(gpu::SURF_GPU::Y_ROW),
                    kps.ptr<float>(gpu::SURF_GPU::SIZE_ROW), kps.ptr<float>(gpu::SURF_GPU::ANGLE_ROW), nFeatures);
			
		/*	 void computeDescriptors(const GpuMat& keypoints, GpuMat& descriptors, int descriptorSize)
        {
            const int nFeatures = keypoints.cols;
            if (nFeatures > 0)
            {
                ensureSizeIsEnough(nFeatures, descriptorSize, CV_32F, descriptors);
                compute_descriptors_gpu(descriptors, keypoints.ptr<float>(SURF_GPU::X_ROW), keypoints.ptr<float>(SURF_GPU::Y_ROW),
                    keypoints.ptr<float>(SURF_GPU::SIZE_ROW), keypoints.ptr<float>(SURF_GPU::ANGLE_ROW), nFeatures);
            }
        }*/
			
			surf(src, empty, kps, descriptors1GPU, true);
			cout << "End surf " << endl;
			double extractor_end = time(&tim);
			cout << "GPU descriptors size is " << descriptors1GPU.cols << " " <<  descriptors1GPU.rows << endl;
		//	gpuFastDetector.downloadKeypoints(kps, first_keypoints);
		//	surf.uploadKeypoints(first_keypoints, kps);
//			surf(src, keypoints1GPU, descriptors1GPU);
			double end = time(&tim);
			double elapsed = end - start;
			double detector_time = detector_end - start;
			double extractor_time = extractor_end - detector_end;
			cout << "extract: " << extractor_time << ", ";
			cout << ii << " elapsed = " << elapsed << endl;
			if (elapsed > max){
				max = elapsed;
			}
			if (elapsed < min){
				min = elapsed;
			}
			total += elapsed;
			detector_total += detector_time;
			extractor_total += extractor_time;
			numFrames++;
			src.release(); // Release the memory for the GPU.
			kps.release();
		//	descriptors1GPU.release();
			
		}
		cout << "Total: " << total << " Max: " << max << " Min: " << min << " Average: " 
			<< total / numFrames << " Detector_only avg: " << detector_total / numFrames
			<< " Extractor_only avg: " << extractor_total / numFrames<< endl;
	}
#endif

#if(CPU)
	FastFeatureDetector detector(thresh);
	SurfDescriptorExtractor extractor; 

	for (int i = 0; i < 1; i++){
		double total = 0.0;
		double detector_total = 0.0;
		double extractor_total = 0.0;
		double max = 0.0;
		double min = 100.0;
		bool started = false;
		int numFrames = 0;
		VideoCapture capture(argv[1]);
		if (!capture.isOpened() )
			throw "Error when opening video file.\n";
		cout << "Start loop CPU\n";
		//	double start = time(&tim);
		//	double end = time(&tim);
		//	double elapsed = end - start;
		Mat descriptors, descriptors_keyframe; // Have to be in scope
		vector<KeyPoint> keypoints, first_keypoints;
		for ( ; ; ){
			capture >> frame;
			if (frame.empty() )
				break;
			double start = time(&tim);
			cvtColor(frame, frame, COLOR_BGR2GRAY);
			detector.detect(frame, keypoints);
			double detector_end = time(&tim);
			extractor.compute(frame, keypoints, descriptors); 
			double extractor_end = time(&tim);
			if (!started){
				started = true;
				first_keypoints = keypoints;
				descriptors.copyTo(descriptors_keyframe);
			}else{ // BF Matching
				vector< vector< DMatch > > doubleMatches;
				vector< DMatch > matches;
				vector< DMatch > good_matches;
				BFMatcher matcher;
				matcher.knnMatch( descriptors, descriptors_keyframe, doubleMatches, 2 );
				double ratio = 0.8;
				for (int i = 0; i < doubleMatches.size(); i++) {
					if (doubleMatches[i][0].distance < ratio * 
						doubleMatches[i][1].distance){
					good_matches.push_back(doubleMatches[i][0]);
					}
				}
				vector<Point2d> matched_kps_moved, matched_kps_keyframe;
				for( int i = 0; i < good_matches.size(); i++ ){
				  matched_kps_moved.push_back( keypoints[ good_matches[i].queryIdx ].pt );  // Left frame
				  matched_kps_keyframe.push_back( first_keypoints[ good_matches[i].trainIdx ].pt );
				}
				if (! (matched_kps_moved.size() < 4 || matched_kps_keyframe.size() < 4) ){
					std::vector<uchar> status; 
	
					double fMatP1 = 1.0;
					double fMatP2 = 0.995;
		
				// Use RANSAC and the fundamental matrix to take out points that don't fit geometrically
					findFundamentalMat(matched_kps_moved, matched_kps_keyframe,
						CV_FM_RANSAC, fMatP1, fMatP2, status);
				}
				double end = time(&tim);	
				double elapsed = end - start;
				double detector_time = detector_end - start;
				double extractor_time = extractor_end - detector_end;
				cout << "Elapsed = " << elapsed << endl;
				if (elapsed > max){
					max = elapsed;
				}
				if (elapsed < min){
					min = elapsed;
				}
				total += elapsed;
				detector_total += detector_time;
				extractor_total += extractor_time;
				numFrames++;
			}
		}
		cout << "Total: " << total << " Max: " << max << " Min: " << min << " Average: " 
			<< total / numFrames << " Detector_only avg: " << detector_total / numFrames
			<< " Extractor_only avg: " << extractor_total / numFrames<< endl;
	}
#endif

	return 0;
}


void ensureSizeIsEnough(int rows, int cols, int type, cv::gpu::GpuMat& m)
{
    if (m.empty() || m.type() != type || m.data != m.datastart)
        m.create(rows, cols, type);
    else
    {
        const size_t esz = m.elemSize();
        const ptrdiff_t delta2 = m.dataend - m.datastart;

        const size_t minstep = m.cols * esz;

        Size wholeSize;
        wholeSize.height = std::max(static_cast<int>((delta2 - minstep) / m.step + 1), m.rows);
        wholeSize.width = std::max(static_cast<int>((delta2 - m.step * (wholeSize.height - 1)) / esz), m.cols);

        if (wholeSize.height < rows || wholeSize.width < cols)
            m.create(rows, cols, type);
        else
        {
            m.cols = cols;
            m.rows = rows;
        }
    }
}
