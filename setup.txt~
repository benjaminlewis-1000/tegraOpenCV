Getting the Jetson up and running:

-Flash system with Jetpack
	**-Might need to push CUDA stuff: Use this website https://devtalk.nvidia.com/default/topic/838813/unable-to-push-cuda-opencv-to-jetson-tk1/
-Install Grinch kernel (for wifi and for ROS, at least)
	-http://jetsonhacks.com/2015/05/26/install-grinch-kernel-for-l4t-21-3-on-nvidia-jetson-tk1/
	-Restart the computer after that.
-Compile OpenCV 2.4.11 (not 9 as on the Jetson website) with CUDA support. 
	-Make sure the nonfree module is built as well (this should be a default option, but check that it is with ccmake .. in build directory)
	-You can test out the OpenCV install with the instructions on that website 
	-http://elinux.org/Jetson/Installing_OpenCV
-(Copy libs from /usr/local/cuda-*.*/lib to /usr/lib)
	-Create the following symlinks (may need to adjust directories)
	-sudo ln -s /usr/local/cuda-6.5/lib/libcudart.so /usr/local/lib
	-sudo ln -s /usr/local/cuda-6.5/lib/libcufft.so /usr/local/lib
	-sudo ln -s /usr/local/cuda-6.5/lib/libnpp*.so /usr/local/lib
-Get the directory of armhf ueye drivers
-rsync the drivers to their proper locations
-sudo apt-get install libqt4-qt3support to get ueyedemo running
-Restart the computer so that ueyeusb daemon can start
-Install ros for ARM - seems OK, I think...
-apt-get install ros-indigo-image-transport
-apt-get install ros-indigo-camera-calibration-parsers
-apt-get install ros-indigo-cv-bridge
-sudo apt-get install ros-indigo-tf
-Run ros_packages.sh in relNavScripts/installation
-apt-get install ros-indigo-joy
-apt-get install ros-indigo-tf-conversions
-apt-get install ros-indigo-image-geometry
-apt-get install ros-indigo-eigen-conversions
-Install scripts in dependencies 
	-libraries_install.sh
	-Make homest and levmar (may not need anymore)
	-database_install.sh
